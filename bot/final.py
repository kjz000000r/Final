# -*- coding: utf-8 -*-
"""
NutriCoach - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App
–í–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Mini App!
"""
import os
import logging
import secrets
from datetime import datetime, timezone, timedelta
from dotenv import load_dotenv
from telegram import Update, MenuButtonWebApp, WebAppInfo
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    PreCheckoutQueryHandler, MessageHandler, filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger("nutricoach-bot")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MINI_APP_URL = os.getenv("MINI_APP_URL", "https://your-domain.com")
PAYMENT_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "")
TRIAL_HOURS = int(os.getenv("TRIAL_HOURS", "24"))
WELCOME_IMAGE = os.getenv("WELCOME_IMAGE_URL", "")
ADMIN_USERNAME = (os.getenv("ADMIN_USERNAME", "") or "").lower()

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required in .env")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
from db_pg import db

# ============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

def save_user(user_id: int, username: str = None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        uname = (username or "").lower().lstrip("@")
        db.execute(
            "INSERT INTO subscriptions (user_id, username) VALUES (%s, %s) "
            "ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username",
            (user_id, uname)
        )
        db.execute(
            "INSERT INTO credits (user_id, labs_credits) VALUES (%s, 0) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id,)
        )
        db.execute(
            "INSERT INTO referrals (user_id, ref_code, invited_count) VALUES (%s, %s, 0) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id, secrets.token_urlsafe(6))
        )
        db.commit()
    except Exception as e:
        logger.exception(f"Error saving user {user_id}: {e}")
        db.rollback()


def activate_trial(user_id: int, hours: int) -> datetime:
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        db.execute(
            "INSERT INTO subscriptions (user_id) VALUES (%s) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id,)
        )
        until = datetime.now(timezone.utc) + timedelta(hours=hours)
        db.execute(
            "UPDATE subscriptions SET free_until = %s WHERE user_id = %s",
            (until, user_id)
        )
        db.commit()
        return until
    except Exception as e:
        logger.exception(f"Error activating trial for {user_id}: {e}")
        db.rollback()
        raise


def get_ref_code(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    row = db.execute(
        "SELECT ref_code FROM referrals WHERE user_id = %s",
        (user_id,)
    ).fetchone()
    if row and row["ref_code"]:
        return row["ref_code"]
    
    code = secrets.token_urlsafe(6)
    try:
        db.execute(
            "INSERT INTO referrals (user_id, ref_code, invited_count) VALUES (%s, %s, 0) "
            "ON CONFLICT (user_id) DO UPDATE SET ref_code = EXCLUDED.ref_code",
            (user_id, code)
        )
        db.commit()
    except Exception as e:
        logger.exception(f"Error generating ref code for {user_id}: {e}")
        db.rollback()
    return code


def activate_sub(user_id: int, days: int) -> datetime:
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    try:
        db.execute(
            "INSERT INTO subscriptions (user_id) VALUES (%s) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id,)
        )
        row = db.execute(
            "SELECT expires_at FROM subscriptions WHERE user_id = %s",
            (user_id,)
        ).fetchone()
        
        now = datetime.now(timezone.utc)
        base = now
        
        if row and row["expires_at"]:
            try:
                existing = row["expires_at"]
                if isinstance(existing, str):
                    existing = datetime.fromisoformat(existing)
                if hasattr(existing, 'tzinfo') and existing.tzinfo is None:
                    existing = existing.replace(tzinfo=timezone.utc)
                if existing > now:
                    base = existing
            except Exception as e:
                logger.warning(f"Error parsing existing date: {e}")
                base = now
        
        new_exp = base + timedelta(days=days)
        db.execute(
            "UPDATE subscriptions SET expires_at = %s WHERE user_id = %s",
            (new_exp, user_id)
        )
        db.commit()
        return new_exp
    except Exception as e:
        logger.exception(f"Error activating subscription for {user_id}: {e}")
        db.rollback()
        raise


# ============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞!
    1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç—Ä–∏–∞–ª
    3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π Mini App
    """
    user = update.effective_user
    save_user(user.id, user.username)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if context.args:
        code = (context.args[0] or "").strip()
        if code:
            row = db.execute(
                "SELECT user_id FROM referrals WHERE ref_code = %s",
                (code,)
            ).fetchone()
            inviter_id = row["user_id"] if row else None
            
            if inviter_id and inviter_id != user.id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                act = db.execute(
                    "SELECT 1 FROM referral_activations WHERE invited_id = %s",
                    (user.id,)
                ).fetchone()
                
                if not act:
                    try:
                        db.execute(
                            "INSERT INTO referral_activations (inviter_id, invited_id) "
                            "VALUES (%s, %s) ON CONFLICT DO NOTHING",
                            (inviter_id, user.id)
                        )
                        db.execute(
                            "UPDATE referrals SET invited_count = COALESCE(invited_count, 0) + 1 "
                            "WHERE user_id = %s",
                            (inviter_id,)
                        )
                        activate_sub(inviter_id, 7)  # 7 –¥–Ω–µ–π –±–æ–Ω—É—Å
                        db.commit()
                        
                        try:
                            await context.bot.send_message(
                                inviter_id,
                                "üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +7 –¥–Ω–µ–π –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!"
                            )
                        except Exception:
                            pass
                    except Exception as e:
                        logger.exception(f"Error processing referral: {e}")
                        db.rollback()
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∏–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    is_admin = (user.username or "").lower() == ADMIN_USERNAME and ADMIN_USERNAME
    if not is_admin:
        row = db.execute(
            "SELECT free_until FROM subscriptions WHERE user_id = %s",
            (user.id,)
        ).fetchone()
        
        if row is None or not row.get("free_until"):
            until = activate_trial(user.id, TRIAL_HOURS)
            try:
                await update.message.reply_text(
                    f"üéÅ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {TRIAL_HOURS} —á–∞—Å–æ–≤!\n"
                    f"–î–æ: {until.strftime('%d.%m.%Y %H:%M UTC')}"
                )
            except Exception:
                pass
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ Mini App
    async def setup_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É Mini App –≤ –º–µ–Ω—é"""
        web_app_url = os.getenv("MINI_APP_URL", "https://your-domain.com")
    
        menu_button = MenuButtonWebApp(
            text="ü•ó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=web_app_url)
        )
    
        await context.bot.set_chat_menu_button(
            chat_id=update.effective_chat.id,
            menu_button=menu_button
        )
    
        await update.message.reply_text(
            "‚úÖ –ö–Ω–æ–ø–∫–∞ Mini App —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é (‚ò∞) —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, "
            "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=reply_kb()
        )
    try:
        menu_button = MenuButtonWebApp(
            text="ü•ó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=MINI_APP_URL)
        )
        await context.bot.set_chat_menu_button(
            chat_id=update.effective_chat.id,
            menu_button=menu_button
        )
    except Exception as e:
        logger.error(f"Error setting menu button: {e}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    ref_code = get_ref_code(user.id)
    bot_me = await context.bot.get_me()
    ref_link = f"t.me/{bot_me.username}?start={ref_code}"
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    caption = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü•ó <b>NutriCoach</b> - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é!\n\n"
        "<b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ üìä –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–¥—Å—á—ë—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ ü•ó –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ üß™ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ üç≥ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –¥–æ–º–∞\n"
        "‚Ä¢ ‚ö° –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤–µ—Å\n\n"
        f"üéÅ <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞:</b> {ref_link}\n"
        "–ü–æ–ª—É—á–∏ +7 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ!\n\n"
        "‚ö†Ô∏è <i>–ë–æ—Ç –Ω–µ —Å—Ç–∞–≤–∏—Ç –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.</i>"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App (–µ—Å–ª–∏ –º–µ–Ω—é –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ)
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            "ü•ó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=MINI_APP_URL)
        )]
    ])
    
    try:
        if WELCOME_IMAGE:
            await update.message.reply_photo(
                photo=WELCOME_IMAGE,
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error sending welcome message: {e}")
        await update.message.reply_text(
            caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )


# ============================================
# –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)
# ============================================

async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Pre-checkout handler –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    query = update.pre_checkout_query
    await query.answer(ok=True)


async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = update.effective_user.id
    msg = update.message
    sp = msg.successful_payment
    
    payload = (sp.invoice_payload or "").strip()
    currency = (sp.currency or "").upper()
    amount = int(sp.total_amount or 0)
    provider_charge_id = sp.provider_payment_charge_id
    
    logger.info(f"Payment: user={user_id}, payload={payload}, amount={amount}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞
    if provider_charge_id:
        dup = db.execute(
            "SELECT 1 FROM payments WHERE provider_charge_id = %s",
            (provider_charge_id,)
        ).fetchone()
        if dup:
            await msg.reply_text("–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ —É—á—Ç—ë–Ω üëç")
            return
    
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ payload (—Ñ–æ—Ä–º–∞—Ç: "pay:sub:30" –∏–ª–∏ "pay:labs")
        if payload.startswith("pay:sub:"):
            days = int(payload.split(":")[2])
            exp = activate_sub(user_id, days)
            
            db.execute(
                "INSERT INTO payments (user_id, payload, currency, amount, provider_charge_id) "
                "VALUES (%s, %s, %s, %s, %s) ON CONFLICT DO NOTHING",
                (user_id, payload, currency, amount, provider_charge_id)
            )
            db.commit()
            
            await msg.reply_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {exp.strftime('%d.%m.%Y')}!\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
            )
            
        elif payload.startswith("pay:labs"):
            qty = 1
            db.execute(
                "INSERT INTO credits (user_id, labs_credits) VALUES (%s, 0) "
                "ON CONFLICT (user_id) DO NOTHING",
                (user_id,)
            )
            db.execute(
                "UPDATE credits SET labs_credits = labs_credits + %s WHERE user_id = %s",
                (qty, user_id)
            )
            db.execute(
                "INSERT INTO payments (user_id, payload, currency, amount, provider_charge_id) "
                "VALUES (%s, %s, %s, %s, %s) ON CONFLICT DO NOTHING",
                (user_id, payload, currency, amount, provider_charge_id)
            )
            db.commit()
            
            await msg.reply_text(f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–æ {qty} –∞–Ω–∞–ª–∏–∑(–∞/–æ–≤). üß™")
        else:
            await msg.reply_text("‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω!")
            
    except Exception as e:
        logger.exception(f"Payment processing error: {e}")
        db.rollback()
        await msg.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


# ============================================
# –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ú–û–ö–û–î–û–í
# ============================================

async def promo_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /promo –ö–û–î - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"""
    if not context.args:
        await update.message.reply_text(
            "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:\n/promo –ö–û–î\n\n"
            "–ü—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –±–æ—Ç–µ –∏–ª–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return
    
    code = (context.args[0] or "").strip()
    user_id = update.effective_user.id
    
    row = db.execute(
        "SELECT days, labs_credits, max_uses, used_count, expires_at "
        "FROM promocodes WHERE code = %s",
        (code,)
    ).fetchone()
    
    if not row:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    days = int(row["days"] or 0)
    credits = int(row["labs_credits"] or 0)
    max_uses = row["max_uses"]
    used_count = row["used_count"]
    expires_at = row["expires_at"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    now = datetime.now(timezone.utc)
    if expires_at:
        try:
            exp_dt = expires_at if isinstance(expires_at, datetime) else datetime.fromisoformat(expires_at)
            if exp_dt.tzinfo is None:
                exp_dt = exp_dt.replace(tzinfo=timezone.utc)
            if exp_dt < now:
                await update.message.reply_text("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.")
                return
        except Exception as e:
            logger.warning(f"Error parsing promo expiry: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if max_uses is not None and used_count is not None and used_count >= max_uses:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return
    
    if days <= 0 and credits <= 0:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞—ë—Ç.")
        return
    
    try:
        parts = []
        if days > 0:
            activate_sub(user_id, days)
            parts.append(f"+{days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")
        if credits > 0:
            db.execute(
                "INSERT INTO credits (user_id, labs_credits) VALUES (%s, 0) "
                "ON CONFLICT (user_id) DO NOTHING",
                (user_id,)
            )
            db.execute(
                "UPDATE credits SET labs_credits = labs_credits + %s WHERE user_id = %s",
                (credits, user_id)
            )
            parts.append(f"+{credits} –∞–Ω–∞–ª–∏–∑(–∞/–æ–≤)")
        
        db.execute(
            "UPDATE promocodes SET used_count = COALESCE(used_count, 0) + 1 WHERE code = %s",
            (code,)
        )
        db.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω: {', '.join(parts)}!"
        )
    except Exception as e:
        logger.exception(f"Promo apply error: {e}")
        db.rollback()
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.")


# ============================================
# ADMIN: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
# ============================================

async def addpromo_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    /addpromo –ö–û–î –î–ù–ò [–ê–ù–ê–õ–ò–ó–´] [MAX_USES] [YYYY-MM-DD]
    """
    user = update.effective_user
    if (user.username or "").lower() != ADMIN_USERNAME:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/addpromo –ö–û–î –î–ù–ò [–ê–ù–ê–õ–ò–ó–´] [MAX_USES] [YYYY-MM-DD]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /addpromo TEST30 30\n"
            "‚Ä¢ /addpromo FREE2 0 2\n"
            "‚Ä¢ /addpromo MEGA 30 5 100 2025-12-31"
        )
        return
    
    code = args[0].strip()
    days = int(args[1])
    
    labs_credits = 0
    max_uses = None
    expires_at = None
    
    if len(args) >= 3:
        labs_credits = int(args[2])
    if len(args) >= 4:
        max_uses = int(args[3])
    if len(args) >= 5:
        expires_at = args[4]
    
    try:
        db.execute(
            """
            INSERT INTO promocodes (code, days, labs_credits, max_uses, used_count, expires_at)
            VALUES (%s, %s, %s, %s, 0, %s)
            ON CONFLICT (code) DO UPDATE SET
                days = EXCLUDED.days,
                labs_credits = EXCLUDED.labs_credits,
                max_uses = EXCLUDED.max_uses,
                expires_at = EXCLUDED.expires_at
            """,
            (code, days, labs_credits, max_uses, expires_at)
        )
        db.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω:\n"
            f"‚Ä¢ {days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
            f"‚Ä¢ {labs_credits} –∞–Ω–∞–ª–∏–∑(–æ–≤)\n"
            f"‚Ä¢ max_uses: {max_uses}\n"
            f"‚Ä¢ expires: {expires_at or '–Ω–∏–∫–æ–≥–¥–∞'}"
        )
    except Exception as e:
        logger.exception(f"Error creating promo: {e}")
        db.rollback()
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.")


# ============================================
# CATCH-ALL HANDLER
# ============================================

async def handle_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –ù–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Mini App
    """
    keyboard = [[InlineKeyboardButton(
        "ü•ó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=WebAppInfo(url=MINI_APP_URL)
    )]]
    from telegram import InlineKeyboardMarkup
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –æ—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é (‚ò∞) —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# ============================================
# MAIN
# ============================================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("promo", promo_cmd))
    app.add_handler(CommandHandler("addpromo", addpromo_cmd))
    
    # –ü–ª–∞—Ç–µ–∂–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
    if PAYMENT_TOKEN:
        app.add_handler(PreCheckoutQueryHandler(precheckout))
        app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    
    # Catch-all –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(
        filters.TEXT | filters.PHOTO | filters.Document.ALL,
        handle_any_message
    ))
    
    logger.info("üöÄ NutriCoach Mini App Bot started!")
    logger.info(f"üì± Mini App URL: {MINI_APP_URL}")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()